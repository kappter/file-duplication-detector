<script type="text/javascript">
        var gk_isXlsx = false;
        var gk_xlsxFileLookup = {};
        var gk_fileData = {};
        function filledCell(cell) {
          return cell !== '' && cell != null;
        }
        function loadFileData(filename) {
        if (gk_isXlsx && gk_xlsxFileLookup[filename]) {
            try {
                var workbook = XLSX.read(gk_fileData[filename], { type: 'base64' });
                var firstSheetName = workbook.SheetNames[0];
                var worksheet = workbook.Sheets[firstSheetName];

                // Convert sheet to JSON to filter blank rows
                var jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1, blankrows: false, defval: '' });
                // Filter out blank rows (rows where all cells are empty, null, or undefined)
                var filteredData = jsonData.filter(row => row.some(filledCell));

                // Heuristic to find the header row by ignoring rows with fewer filled cells than the next row
                var headerRowIndex = filteredData.findIndex((row, index) =>
                  row.filter(filledCell).length >= filteredData[index + 1]?.filter(filledCell).length
                );
                // Fallback
                if (headerRowIndex === -1 || headerRowIndex > 25) {
                  headerRowIndex = 0;
                }

                // Convert filtered JSON back to CSV
                var csv = XLSX.utils.aoa_to_sheet(filteredData.slice(headerRowIndex)); // Create a new sheet from filtered array of arrays
                csv = XLSX.utils.sheet_to_csv(csv, { header: 1 });
                return csv;
            } catch (e) {
                console.error(e);
                return "";
            }
        }
        return gk_fileData[filename] || "";
        }
        </script><!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>File Duplication Detector</title>
  <!-- Use relative path for GitHub Pages -->
  <link rel="stylesheet" href="dist/output.css">
  <!-- Remove styles.css to avoid conflicts; re-add if needed with Tailwind compatibility -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/exif-js/2.3.0/exif.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/js-sha256/0.9.0/sha256.min.js"></script>
  <link rel="icon" type="image/x-icon" href="favicon.ico">
  <script type="text/javascript">
    var gk_isXlsx = false;
    var gk_xlsxFileLookup = {};
    var gk_fileData = {};
    function filledCell(cell) {
      return cell !== '' && cell != null;
    }
    function loadFileData(filename) {
      if (gk_isXlsx && gk_xlsxFileLookup[filename]) {
        try {
          var workbook = XLSX.read(gk_fileData[filename], { type: 'base64' });
          var firstSheetName = workbook.SheetNames[0];
          var worksheet = workbook.Sheets[firstSheetName];
          var jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1, blankrows: false, defval: '' });
          var filteredData = jsonData.filter(row => row.some(filledCell));
          var headerRowIndex = filteredData.findIndex((row, index) =>
            row.filter(filledCell).length >= filteredData[index + 1]?.filter(filledCell).length
          );
          if (headerRowIndex === -1 || headerRowIndex > 25) {
            headerRowIndex = 0;
          }
          var csv = XLSX.utils.aoa_to_sheet(filteredData.slice(headerRowIndex));
          csv = XLSX.utils.sheet_to_csv(csv, { header: 1 });
          return csv;
        } catch (e) {
          console.error(e);
          return "";
        }
      }
      return gk_fileData[filename] || "";
    }
  </script>
</head>
<body class="bg-gray-100 min-h-screen flex flex-col">
  <div class="flex-grow flex items-center justify-center">
    <div class="bg-white p-8 rounded-lg shadow-lg w-full max-w-4xl">
      <h1 class="text-2xl font-bold mb-6 text-center">File Duplication Detector</h1>
      <div class="grid grid-cols-2 gap-4 mb-6">
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-2">File 1</label>
          <input type="file" id="file1" class="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100">
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-2">File 2</label>
          <input type="file" id="file2" class="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100">
        </div>
      </div>
      <button id="compareBtn" class="w-full bg-blue-600 text-white py-2 rounded hover:bg-blue-700 disabled:bg-gray-400" disabled>Analyze Files</button>
      <div id="results" class="mt-6 hidden">
        <h2 class="text-xl font-semibold mb-4">Duplication Analysis</h2>
        <p id="duplicationScore" class="text-lg font-medium mb-4"></p>
        <div class="overflow-x-auto">
          <table class="w-full border-collapse">
            <thead>
              <tr class="bg-gray-200">
                <th class="border p-2 text-left">Property</th>
                <th class="border p-2 text-left">File 1</th>
                <th class="border p-2 text-left">File 2</th>
              </tr>
            </thead>
            <tbody id="comparisonTable"></tbody>
          </table>
        </div>
        <div id="warnings" class="mt-4 text-yellow-700 bg-yellow-100 p-4 rounded"></div>
      </div>
    </div>
  </div>
  <footer class="bg-gray-800 text-white text-center py-2 fixed bottom-0 w-full">
    <p>Â© 2025 Ken Kapptie | For educational use only | All rights reserved.</p>
    <p>Please be patient as requests can take up to a minute depending on the file size and complexity.</p>
    <div class="donation-links">
      <a href="https://github.com/kappter/file-duplication-detector">Detailed info on app | </a>
      <a href="https://kappter.github.io/portfolio/#projects" target="_blank">More tools like this | </a>
      <a href="https://kappter.github.io/portfolio/proposal.html">Want your own?</a>
    </div>
  </footer>
  <script src="script.js"></script>
</body>
</html>
{
  "name": "file-duplication-detector",
  "version": "1.0.0",
  "description": "Frontend for File Duplication Detector",
  "scripts": {
    "build": "npx tailwindcss -i ./src/input.css -o ./dist/output.css"
  },
  "devDependencies": {
    "tailwindcss": "^3.4.1"
  }
}

# File Duplication Detector

The File Duplication Detector is a web-based tool designed to compare two files and assess their likelihood of being duplicates, primarily for detecting potential academic misconduct. It analyzes metadata and content, providing a duplication probability score based on weighted comparisons of key properties.

## Features
- **File Upload**: Upload two files (e.g., images, PDFs, documents) via a user-friendly interface.
- **Metadata Comparison**: Compares file size, type, creation date, last modified date, content hash, and EXIF data (for images).
- **Duplication Score**: Calculates a percentage score indicating the likelihood of duplication.
- **Warnings**: Highlights potential indicators of duplication with detailed explanations.
- **Responsive Design**: Built with Tailwind CSS for a clean, mobile-friendly UI.
- **Client-Side Fallback**: Extracts metadata client-side if the backend is unavailable.

## How It Works
1. **Upload Files**: Select two files using the input fields.
2. **Backend Analysis**: Files are sent to a Render-hosted backend for metadata extraction (e.g., content hash, creation date). If the backend fails, the tool falls back to client-side analysis.
3. **EXIF Extraction**: For image files, EXIF data (e.g., camera details, timestamps) is extracted client-side using `exif-js`.
4. **Comparison**: The tool compares the following properties:
   - **Content Hash**: SHA-256 hash of file contents.
   - **Creation Date**: File creation timestamp.
   - **EXIF Data**: Camera and timestamp data (images only).
   - **Size**: File size in bytes.
   - **Last Modified**: Last modified timestamp.
   - **Type**: File MIME type.
5. **Duplication Score**: A weighted score is calculated based on matching properties, capped at 100%.
6. **Results**: A table displays property comparisons, with matching properties highlighted. Warnings explain potential duplication indicators.

## Duplication Score Calculation
The duplication probability score is calculated by assigning weights to each property when they match between the two files. The weights reflect the strength of each property as an indicator of duplication, particularly for academic misconduct detection. The current weights are:

- **Content Hash**: 50% (identical file contents, the strongest indicator of duplication)
- **Creation Date**: 30% (identical creation timestamps suggest simultaneous creation or copying)
- **EXIF Data**: 10% (identical camera/timestamp data for images)
- **Size**: 4% (identical file sizes, a weak indicator)
- **Last Modified**: 3% (identical last modified dates, less reliable due to edits)
- **Type**: 3% (identical file types, a minimal indicator)

The total score is the sum of weights for matching properties, expressed as a percentage (maximum 100%). For example, if two files have identical content hash and creation date, the score is 50 + 30 = 80%.

## Installation and Usage
1. **Clone the Repository**:
   ```bash
   git clone https://github.com/kappter/file-duplication-detector.git
   ```
2. **Serve the Application**:
   - Open `index.html` in a browser for local testing.
   - Alternatively, deploy to a server (e.g., Render, Netlify) and configure the backend URL in `script.js` (`BACKEND_URL`).
3. **Dependencies**:
   - No installation required for client-side scripts (loaded via CDN: Tailwind CSS, exif-js, js-sha256).
   - Backend requires a Node.js server (see `backend` directory for setup).
4. **Usage**:
   - Upload two files using the input fields.
   - Click "Analyze Files" to compare.
   - Review the results table, duplication score, and warnings.
   - Note: Large files or complex comparisons may take up to a minute.

## Technical Details
- **Frontend**: HTML, JavaScript, Tailwind CSS, with client-side libraries (`exif-js`, `js-sha256`).
- **Backend**: Node.js server (hosted on Render) for metadata extraction and content hashing.
- **Fallback**: Client-side metadata extraction using JavaScriptâs File API and SHA-256 hashing.
- **Excel Support**: Handles `.xlsx` files using `XLSX` library to filter blank rows and extract CSV data.
- **Styling**: Custom CSS (`styles.css`) complements Tailwind for table formatting and highlight colors (orange for strong matches, yellow for weak matches).

## Limitations
- Backend availability depends on Renderâs free tier, which may spin down with inactivity.
- Creation and modified dates may not be available for all files (falls back to `N/A`).
- EXIF data is only applicable to images.
- Large files may cause delays in processing.

## Contributing
Contributions are welcome! Please:
1. Fork the repository.
2. Create a feature branch (`git checkout -b feature-name`).
3. Commit changes (`git commit -m "Add feature"`).
4. Push to the branch (`git push origin feature-name`).
5. Open a pull request.

## License
Â© 2025 Ken Kapptie. For educational use only. All rights reserved.

## Links
- [Detailed Info](https://github.com/kappter/file-duplication-detector)
- [More Tools](https://kappter.github.io/portfolio/#projects)
- [Custom Solutions](https://kappter.github.io/portfolio/proposal.html)
document.addEventListener('DOMContentLoaded', () => {
  const file1Input = document.getElementById('file1');
  const file2Input = document.getElementById('file2');
  const compareBtn = document.getElementById('compareBtn');
  const resultsDiv = document.getElementById('results');
  const comparisonTable = document.getElementById('comparisonTable');
  const warningsDiv = document.getElementById('warnings');
  const duplicationScore = document.getElementById('duplicationScore');

  // Replace with your actual Render backend URL
  const BACKEND_URL = 'https://file-duplication-backend.onrender.com/upload';

  // Enable analyze button when both files are selected
  function checkInputs() {
    compareBtn.disabled = !(file1Input.files.length && file2Input.files.length);
  }

  file1Input.addEventListener('change', checkInputs);
  file2Input.addEventListener('change', checkInputs);

  // Analyze files on button click
  compareBtn.addEventListener('click', async () => {
    const file1 = file1Input.files[0];
    const file2 = file2Input.files[0];
    comparisonTable.innerHTML = '';
    warningsDiv.innerHTML = '';
    duplicationScore.innerHTML = '';
    resultsDiv.classList.remove('hidden');

    // Send files and lastModified to backend
    const formData = new FormData();
    formData.append('files', file1);
    formData.append('lastModified', file1.lastModified ? new Date(file1.lastModified).toISOString() : 'N/A');
    formData.append('files', file2);
    formData.append('lastModified', file2.lastModified ? new Date(file2.lastModified).toISOString() : 'N/A');
    let meta1, meta2;
    try {
      const response = await fetch(BACKEND_URL, {
        method: 'POST',
        body: formData,
      });
      if (!response.ok) throw new Error('Backend request failed');
      [meta1, meta2] = await response.json();
      console.log('Meta1:', meta1);
      console.log('Meta2:', meta2);
    } catch (error) {
      warningsDiv.innerHTML = `<strong>Error:</strong> Failed to fetch metadata from server: ${error.message}. Falling back to client-side analysis.`;
      meta1 = await getClientMetadata(file1);
      meta2 = await getClientMetadata(file2);
      console.log('Client Meta1:', meta1);
      console.log('Client Meta2:', meta2);
    }

    // Extract EXIF data client-side for images
    if (file1.type.startsWith('image/')) {
      meta1.exif = await getExifData(file1);
    }
    if (file2.type.startsWith('image/')) {
      meta2.exif = await getExifData(file2);
    }

    // Compare metadata and calculate duplication score
    const properties = ['Size (bytes)', 'Type', 'Created', 'Last Modified', 'Content Hash', 'EXIF Data'];
    const warnings = [];
    let score = 0;
    const weights = {
      created: 90, // Base score if creation dates match
      hash_if_created: 5, // Additional score if hash matches with creation date
      hash_alone: 50, // Score if hash matches but creation dates don't
      exif: 2, // Identical EXIF data (images)
      size: 1, // Identical size
      modified: 1, // Identical last modified date
      type: 1 // Identical type
    };

    properties.forEach(prop => {
      const row = document.createElement('tr');
      let val1, val2, isSimilar = false, highlightClass = '';
      let scoreAdjustment = 0;

      switch (prop) {
        case 'Size (bytes)':
          val1 = meta1.size;
          val2 = meta2.size;
          if (val1 === val2) {
            scoreAdjustment = weights.size;
            score += scoreAdjustment;
            isSimilar = true;
            highlightClass = 'bg-similar-weak';
            warnings.push('Files have identical sizes, which may indicate duplication or shared origin. This is a weak indicator.');
          }
          break;
        case 'Type':
          val1 = meta1.type;
          val2 = meta2.type;
          if (val1 === val2) {
            scoreAdjustment = weights.type;
            score += scoreAdjustment;
            isSimilar = true;
            highlightClass = 'bg-similar-weak';
            warnings.push('Files have identical types, which may support duplication if other metadata match. This is a weak indicator.');
          }
          break;
        case 'Created':
          val1 = meta1.created || 'N/A';
          val2 = meta2.created || 'N/A';
          if (val1 === val2 && val1 !== 'N/A') {
            score = weights.created;
            isSimilar = true;
            highlightClass = 'bg-similar-strong';
            warnings.push('Files have identical creation dates, strongly suggesting they were created simultaneously or copied. This is a very strong indicator of potential misconduct.');
          }
          break;
        case 'Last Modified':
          val1 = meta1.modified || 'N/A';
          val2 = meta2.modified || 'N/A';
          if (val1 === val2 && val1 !== 'N/A') {
            scoreAdjustment = weights.modified;
            score += scoreAdjustment;
            isSimilar = true;
            highlightClass = 'bg-similar-weak';
            warnings.push('Files have identical last modified dates, which may suggest copying or synchronized edits. This is a weak indicator.');
          }
          break;
        case 'Content Hash':
          val1 = meta1.hash;
          val2 = meta2.hash;
          if (val1 === val2) {
            if (score >= weights.created) { // Creation dates matched
              scoreAdjustment = weights.hash_if_created;
              score += scoreAdjustment; // Add 5 to reach 95
            } else {
              scoreAdjustment = weights.hash_alone;
              score += scoreAdjustment; // Add 50 if no creation date match
            }
            isSimilar = true;
            highlightClass = 'bg-similar-strong';
            warnings.push('Files have identical content hashes, indicating they are identical. This is a very strong indicator of potential academic misconduct.');
          } else if (score >= weights.created) {
            score -= 5; // Reduce score if hashes differ but creation dates match
            warnings.push('Creation dates match, but content hashes differ, suggesting possible edits or different content.');
          }
          break;
        case 'EXIF Data':
          val1 = meta1.exif ? JSON.stringify(meta1.exif, null, 2) : 'N/A';
          val2 = meta2.exif ? JSON.stringify(meta2.exif, null, 2) : 'N/A';
          if (val1 !== 'N/A' && val1 === val2) {
            scoreAdjustment = weights.exif;
            score += scoreAdjustment;
            isSimilar = true;
            highlightClass = 'bg-similar-strong';
            warnings.push('Files have identical EXIF data, suggesting they were taken by the same device or copied. This is a strong indicator.');
          }
          break;
      }

      row.innerHTML = `
        <td class="border p-2">${prop}</td>
        <td class="border p-2">${val1}</td>
        <td class="border p-2">${val2}</td>
      `;
      if (isSimilar) {
        row.classList.add(highlightClass);
      }
      comparisonTable.appendChild(row);
    });

    // Cap score at 100
    score = Math.min(score, 100);
    duplicationScore.innerHTML = `Duplication Probability: ${score.toFixed(2)}%`;

    // Display warnings
    if (warnings.length) {
      warningsDiv.innerHTML = '<strong>Warnings:</strong><ul>' + warnings.map(w => `<li>${w}</li>`).join('') + '</ul>';
    } else {
      warningsDiv.innerHTML = 'No significant duplication indicators detected.';
    }
  });

  // Fallback client-side metadata extraction
  async function getClientMetadata(file) {
    const metadata = {
      name: file.name,
      size: file.size,
      type: file.type,
      created: file.lastModified ? new Date(file.lastModified).toISOString() : 'N/A',
      modified: file.lastModified ? new Date(file.lastModified).toISOString() : 'N/A',
      hash: await getFileHash(file),
      exif: null
    };
    return metadata;
  }

  // Get file hash using SHA-256
  async function getFileHash(file) {
    const arrayBuffer = await file.arrayBuffer();
    const hashBuffer = await crypto.subtle.digest('SHA-256', arrayBuffer);
    const hashArray = Array.from(new Uint8Array(hashBuffer));
    return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
  }

  // Get EXIF data using exif-js
  function getExifData(file) {
    return new Promise((resolve, reject) => {
      EXIF.getData(file, function() {
        const exifData = EXIF.getAllTags(this);
        if (Object.keys(exifData).length) {
          resolve(exifData);
        } else {
          resolve(null);
        }
      });
    });
  }
});
/* Custom styles to complement Tailwind */
body {
  font-family: 'Inter', sans-serif;
}
table {
  font-size: 0.875rem;
}
th, td {
  padding: 0.5rem;
  word-break: break-all;
  white-space: normal;
  max-width: 300px;
}
.bg-similar-strong {
  background-color: #fed7aa; /* Orange for high-weight matches (hash, EXIF, size, created) */
}
.bg-similar-weak {
  background-color: #fefcbf; /* Yellow for low-weight matches (modified, type) */
}
footer {
  z-index: 10;
}
@media (max-width: 640px) {
  th, td {
    max-width: 150px;
  }
}
module.exports = {
  content: ['./*.html'],
  theme: { extend: {} },
  plugins: []
};
